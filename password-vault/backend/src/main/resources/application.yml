spring:
  application:
    name: password-vault-backend
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/password_vault}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: ${DATABASE_DRIVER:org.postgresql.Driver}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
        format_sql: true
        use_sql_comments: true
  
  # Session Configuration
  session:
    store-type: jdbc
    jdbc:
      initialize-schema: always
      table-name: SPRING_SESSION
    timeout: 86400s # 24 hours
    cookie:
      name: VAULT_SESSION
      secure: ${COOKIE_SECURE:false}
      http-only: true
      same-site: lax
      max-age: 86400 # 24 hours

# Server Configuration
server:
  port: ${PORT:8080}
  servlet:
    context-path: /api
    session:
      timeout: 86400s
  error:
    include-message: always
    include-binding-errors: always

# Application Configuration
app:
  # Encryption Configuration
  encryption:
    secret-key: ${ENCRYPTION_SECRET_KEY:your-256-bit-secret-key-here-change-in-production}
  
  # JWT Configuration (alternative to sessions)
  jwt:
    secret: ${JWT_SECRET:your-jwt-secret-key-change-in-production}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
  
  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
    max-age: ${CORS_MAX_AGE:3600}

# Logging Configuration
logging:
  level:
    com.passwordvault: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized